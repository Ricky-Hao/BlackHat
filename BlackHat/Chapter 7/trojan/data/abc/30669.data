environ({'NUMBER_OF_PROCESSORS': '4', 'USERPROFILE': 'C:\\Users\\a9596', 'TMP': 'C:\\Users\\a9596\\AppData\\Local\\Temp', 'PROGRAMDATA': 'C:\\ProgramData', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'APPDATA': 'C:\\Users\\a9596\\AppData\\Roaming', 'PROCESSOR_ARCHITECTURE': 'x86', 'USERNAME': 'a9596', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'PSMODULEPATH': 'C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'USERDOMAIN': 'RICKY-TABLET', 'PUBLIC': 'C:\\Users\\Public', 'PROCESSOR_LEVEL': '6', 'SYSTEMROOT': 'C:\\WINDOWS', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW', 'SYSTEMDRIVE': 'C:', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 55 Stepping 8, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'OS': 'Windows_NT', 'HOMEDRIVE': 'C:', 'COMPUTERNAME': 'RICKY-TABLET', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'LOCALAPPDATA': 'C:\\Users\\a9596\\AppData\\Local', 'PATH': 'C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files\\Python 3.5\\Scripts\\;C:\\Program Files\\Python 3.5\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\', 'HOMEPATH': '\\Users\\a9596', 'PROMPT': '$P$G', 'LOGONSERVER': '\\\\MicrosoftAccount', 'PROCESSOR_REVISION': '3708', 'TEMP': 'C:\\Users\\a9596\\AppData\\Local\\Temp', 'USERDOMAIN_ROAMINGPROFILE': 'RICKY-TABLET', 'WINDIR': 'C:\\WINDOWS'})